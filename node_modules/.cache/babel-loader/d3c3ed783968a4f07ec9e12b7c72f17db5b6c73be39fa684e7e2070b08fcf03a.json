{"ast":null,"code":"var _jsxFileName = \"/Users/akashmishra/Documents/itc-505-teamproject/React_E-Commerce/src/pages/Register.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst express = require('express');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst bcrypt = require('bcryptjs');\nconst {\n  Pool\n} = require('pg');\nconst dotenv = require('dotenv');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\ndotenv.config();\n\n// Initialize Express and configure it\nconst app = express();\nconst port = process.env.PORT || 5000;\napp.use(cors());\napp.use(bodyParser.json());\n\n// Setup PostgreSQL connection\nconst pool = new Pool({\n  user: process.env.DB_USER,\n  host: process.env.DB_HOST,\n  database: process.env.DB_NAME,\n  password: process.env.DB_PASSWORD,\n  port: process.env.DB_PORT\n});\n\n// Handle the POST request to register a user\napp.post('/api/users/register', async (req, res) => {\n  const {\n    email,\n    password,\n    fname,\n    lname\n  } = req.body;\n  try {\n    // Check if user exists\n    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);\n    if (result.rows.length > 0) {\n      return res.status(400).json({\n        message: 'User already exists'\n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Insert user into database\n    await pool.query('INSERT INTO users (email, password, fname, lname) VALUES ($1, $2, $3, $4)', [email, hashedPassword, fname, lname]);\n    res.status(200).json({\n      message: 'User registered successfully'\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\n\n// Serve React frontend (Assuming build files are already generated)\napp.use(express.static(path.join(__dirname, 'client/build')));\n\n// Serve index.html for the frontend route\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'client/build', 'index.html'));\n});\n\n// Starting Express server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n\n// React code in the same file (Just for this example)\nconst Register = () => {\n  _s();\n  const [email, setEmail] = React.useState('');\n  const [fname, setFname] = React.useState('');\n  const [lname, setLname] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [error, setError] = React.useState('');\n  const [message, setMessage] = React.useState('');\n  const handleRegister = async e => {\n    e.preventDefault();\n    const newUser = {\n      email,\n      fname,\n      lname,\n      password\n    };\n    try {\n      const response = await fetch('/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newUser)\n      });\n      const result = await response.json();\n      if (response.status === 200) {\n        setMessage('Registration successful!');\n      } else {\n        setError(result.message);\n      }\n    } catch (err) {\n      setError('An error occurred. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleRegister,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"First Name\",\n        value: fname,\n        onChange: e => setFname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Last Name\",\n        value: lname,\n        onChange: e => setLname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n// Render React component to HTML\n_s(Register, \"49egCzV/BBaF4ASnI4/k6Wwj58s=\");\n_c = Register;\nconst html = ReactDOMServer.renderToString( /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 138,\n  columnNumber: 44\n}, this));\nconsole.log(html); // This line just shows how to render React to HTML (not necessary for full implementation)\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["express","require","path","bodyParser","cors","bcrypt","Pool","dotenv","React","ReactDOMServer","config","app","port","process","env","PORT","use","json","pool","user","DB_USER","host","DB_HOST","database","DB_NAME","password","DB_PASSWORD","DB_PORT","post","req","res","email","fname","lname","body","result","query","rows","length","status","message","hashedPassword","hash","err","static","join","__dirname","get","sendFile","listen","console","log","Register","_s","setEmail","useState","setFname","setLname","setPassword","error","setError","setMessage","handleRegister","e","preventDefault","newUser","response","fetch","method","headers","JSON","stringify","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","_c","html","renderToString","$RefreshReg$"],"sources":["/Users/akashmishra/Documents/itc-505-teamproject/React_E-Commerce/src/pages/Register.jsx"],"sourcesContent":["const express = require('express');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst bcrypt = require('bcryptjs');\nconst { Pool } = require('pg');\nconst dotenv = require('dotenv');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\n\ndotenv.config();\n\n// Initialize Express and configure it\nconst app = express();\nconst port = process.env.PORT || 5000;\n\napp.use(cors());\napp.use(bodyParser.json());\n\n// Setup PostgreSQL connection\nconst pool = new Pool({\n    user: process.env.DB_USER,\n    host: process.env.DB_HOST,\n    database: process.env.DB_NAME,\n    password: process.env.DB_PASSWORD,\n    port: process.env.DB_PORT,\n});\n\n// Handle the POST request to register a user\napp.post('/api/users/register', async (req, res) => {\n    const { email, password, fname, lname } = req.body;\n\n    try {\n        // Check if user exists\n        const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);\n        if (result.rows.length > 0) {\n            return res.status(400).json({ message: 'User already exists' });\n        }\n\n        // Hash password\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        // Insert user into database\n        await pool.query(\n            'INSERT INTO users (email, password, fname, lname) VALUES ($1, $2, $3, $4)',\n            [email, hashedPassword, fname, lname]\n        );\n\n        res.status(200).json({ message: 'User registered successfully' });\n    } catch (err) {\n        res.status(500).json({ message: err.message });\n    }\n});\n\n// Serve React frontend (Assuming build files are already generated)\napp.use(express.static(path.join(__dirname, 'client/build')));\n\n// Serve index.html for the frontend route\napp.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, 'client/build', 'index.html'));\n});\n\n// Starting Express server\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n});\n\n// React code in the same file (Just for this example)\nconst Register = () => {\n    const [email, setEmail] = React.useState('');\n    const [fname, setFname] = React.useState('');\n    const [lname, setLname] = React.useState('');\n    const [password, setPassword] = React.useState('');\n    const [error, setError] = React.useState('');\n    const [message, setMessage] = React.useState('');\n    \n    const handleRegister = async (e) => {\n        e.preventDefault();\n        const newUser = { email, fname, lname, password };\n\n        try {\n            const response = await fetch('/api/users/register', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(newUser),\n            });\n\n            const result = await response.json();\n            if (response.status === 200) {\n                setMessage('Registration successful!');\n            } else {\n                setError(result.message);\n            }\n        } catch (err) {\n            setError('An error occurred. Please try again.');\n        }\n    };\n\n    return (\n        <div>\n            <h1>Register</h1>\n            <form onSubmit={handleRegister}>\n                <input\n                    type=\"text\"\n                    placeholder=\"First Name\"\n                    value={fname}\n                    onChange={(e) => setFname(e.target.value)}\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                    value={lname}\n                    onChange={(e) => setLname(e.target.value)}\n                />\n                <input\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                />\n                <input\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                />\n                <button type=\"submit\">Register</button>\n            </form>\n            {message && <p>{message}</p>}\n            {error && <p>{error}</p>}\n        </div>\n    );\n};\n\n// Render React component to HTML\nconst html = ReactDOMServer.renderToString(<Register />);\nconsole.log(html); // This line just shows how to render React to HTML (not necessary for full implementation)\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}